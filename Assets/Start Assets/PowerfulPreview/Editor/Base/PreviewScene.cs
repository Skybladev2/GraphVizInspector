using StartAssets.PowerfulPreview.Drawers;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace StartAssets.PowerfulPreview
{
    /// <summary>
    /// A class which manages all the instantiated objects, including 
    /// built-in preview things like grid and light. 
    /// You should use this to instantiate and then add instantiated objects 
    /// into the preview. 
    /// </summary>
    public class PreviewScene : System.IDisposable
    {
        /// <summary>
        /// Create a preview scene for some specific preview instance. 
        /// </summary>
        public PreviewScene( Preview preview )
        {
            mPreview = preview;

            mInstances = new HashSet<GameObject>();
            CreateGrid();
            CreateLight(); 
        }

        /// <summary>
        /// Disposes all the resources allocated during the class lifetime. 
        /// </summary>
        public void Dispose()
        {
            if (mGrid != null)
            {
                Object.DestroyImmediate(mGrid);
            }
            if (mLight != null)
            {
                Object.DestroyImmediate(mLight.gameObject);
            }

            if (mInstances == null)
            {
                return;
            }
            var list = mInstances.ToList();
            for (int i = 0; i < list.Count; i++)
            {
                DestroyInstance(list[i]);
            }
            mInstances.Clear();
        }

        /// <summary>
        /// Tries to find an object with it's unique name, and then 
        /// if it doesn't exist in the scene, it create another game object for it.
        /// </summary>
        /// <param name="uniqueGameObjectName">Unique name of the game object, generated by the preview.</param>
        /// <returns>An instance of the game object, either found or new.</returns>
        public GameObject FindPreviewGameObject(string uniqueGameObjectName)
        {
            var gameObject = GameObject.Find(uniqueGameObjectName);
            if (gameObject == null)
            {
                gameObject = new GameObject(uniqueGameObjectName);
            }
            gameObject.hideFlags = HideFlags.HideAndDontSave;
            gameObject.transform.position = Vector3.zero;
            gameObject.transform.eulerAngles = Vector3.zero;

            var previewObject = gameObject.GetComponent<PreviewObject>();
            if (previewObject == null)
            {
                previewObject = gameObject.AddComponent<PreviewObject>();
            }

            return gameObject;
        }

        /// <summary>
        /// Creates new game object based on the prefab and adds it to the preview scene.
        /// </summary>
        /// <param name="prefab">The game object to instantiate.</param>
        /// <param name="gizmoLayer">Should it be created on the gizmo layer?</param>
        /// <returns>A game object that was created in the preview scene. </returns>
        public virtual GameObject Instantiate(GameObject prefab, bool gizmoLayer = false)
        {
            if (prefab == null)
            {
                return null;
            }
            var gameObject = UnityEngine.Object.Instantiate(prefab, Vector3.zero, Quaternion.Euler(Vector3.zero)) as GameObject;
            AddObject(gameObject, gizmoLayer);
            return gameObject;
        }
        /// <summary>
        /// Adds object to the preview scene. 
        /// </summary>
        /// <param name="gameObject">The game object to instantiate.</param>
        /// <param name="gizmoLayer">Should it be created on the gizmo layer?</param>
        public virtual void AddObject(GameObject gameObject, bool gizmoLayer = false)
        {
            AddObject(gameObject, null, gizmoLayer);
        }
        /// <summary>
        /// Adds object to the preview scene. 
        /// </summary>
        /// <param name="gameObject">The game object to instantiate.</param>
        /// <param name="customMaterial">Custom material that will be applied to the instance.</param>
        /// <param name="gizmoLayer">Should it be created on the gizmo layer?</param>
        public virtual void AddObject(GameObject gameObject, Material customMaterial, bool gizmoLayer = false)
        {
            if (gameObject == null)
            {
                return;
            }
            gameObject.name = mPreview.GetPreviewGameObjectUniqueName( gameObject.name );
            gameObject.hideFlags = HideFlags.HideAndDontSave | HideFlags.DontUnloadUnusedAsset;

            mInstances.Add(gameObject);

            var previewObject = gameObject.AddComponent<PreviewObject>();
            previewObject.Run(gizmoLayer);
            if (customMaterial != null)
            {
                previewObject.RendererMaterial = customMaterial;
            }
        }
        /// <summary>
        /// Destroys the preview game object instance. 
        /// </summary>
        /// <param name="instance">Instance of a game object to destroy.</param>
        public virtual void DestroyInstance(GameObject instance)
        {
            if (instance == null)
            {
                return;
            }
            UnityEngine.Object.DestroyImmediate(instance);
            mInstances.Remove(instance);
        }

        private void CreateGrid()
        {
            string gridName = mPreview.GetPreviewGameObjectUniqueName( "GridInstance" );
            mGrid = GameObject.Find(gridName);
            if (mGrid == null)
            {
                mGrid = GameObject.CreatePrimitive(PrimitiveType.Plane);
            }
            mGrid.hideFlags = HideFlags.HideAndDontSave;
            mGrid.transform.position = new Vector3(0.0f, 0.0f, 0.0f);
            mGrid.transform.localScale = new Vector3(6.0f, 6.0f, 6.0f);
            mGrid.name = gridName;

            var previewObject = mGrid.AddComponent<PreviewObject>();
            previewObject.Run();
            previewObject.RendererMaterial = CreateGridMaterial();
        }
        private void CreateLight()
        {
            var lights = GameObject.FindObjectsOfType<Light>();
            foreach (var light_ in lights)
            {
                light_.cullingMask = light_.cullingMask & ~(1 << 1);
            }

            var lightName = mPreview.GetPreviewGameObjectUniqueName( "Light" );
            var lightObject = GameObject.Find(lightName);
            if (lightObject == null)
            {
                lightObject = new GameObject(lightName);
            }
            lightObject.hideFlags = HideFlags.HideAndDontSave;
            lightObject.AddComponent<PreviewObject>();
            lightObject.transform.eulerAngles = new Vector3(90.0f, 0.0f, 0.0f);
            mLight = lightObject.GetComponent<Light>();
            if (mLight == null)
            {
                mLight = lightObject.AddComponent<Light>();
            }
            mLight.intensity = 0.85f;
            mLight.cullingMask = 1 << 1;
            mLight.shadows = LightShadows.Soft;
            mLight.type = LightType.Directional;
        }
        private Material CreateGridMaterial()
        {
            var gridMaterial = new Material(Shader.Find(@"Unlit/Transparent"));
            gridMaterial.mainTexture = Resources.PreviewGrid.Get();
            gridMaterial.SetTextureScale("_MainTex", new Vector2(16.0f, 16.0f));

            gridMaterial.SetFloat("_Mode", 2);
            gridMaterial.SetInt("_SrcBlend", (int)UnityEngine.Rendering.BlendMode.SrcAlpha);
            gridMaterial.SetInt("_DstBlend", (int)UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha);
            gridMaterial.SetInt("_ZWrite", 0);
            gridMaterial.DisableKeyword("_ALPHATEST_ON");
            gridMaterial.EnableKeyword("_ALPHABLEND_ON");
            gridMaterial.DisableKeyword("_ALPHAPREMULTIPLY_ON");
            gridMaterial.renderQueue = 3000;

            return gridMaterial;
        }

        private Preview mPreview; 
        
        private HashSet<GameObject> mInstances;
		private Light mLight;
        private GameObject mGrid;
    }
}